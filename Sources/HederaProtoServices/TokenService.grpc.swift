//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: TokenService.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Transactions and queries for the Token Service 
///
/// Usage: instantiate `Proto_TokenServiceClient`, then call methods of this protocol to make API calls.
public protocol Proto_TokenServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Proto_TokenServiceClientInterceptorFactoryProtocol? { get }

  func createToken(
    _ request: Proto_Transaction,
    callOptions: CallOptions?
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse>

  func updateToken(
    _ request: Proto_Transaction,
    callOptions: CallOptions?
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse>

  func mintToken(
    _ request: Proto_Transaction,
    callOptions: CallOptions?
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse>

  func burnToken(
    _ request: Proto_Transaction,
    callOptions: CallOptions?
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse>

  func deleteToken(
    _ request: Proto_Transaction,
    callOptions: CallOptions?
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse>

  func wipeTokenAccount(
    _ request: Proto_Transaction,
    callOptions: CallOptions?
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse>

  func freezeTokenAccount(
    _ request: Proto_Transaction,
    callOptions: CallOptions?
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse>

  func unfreezeTokenAccount(
    _ request: Proto_Transaction,
    callOptions: CallOptions?
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse>

  func grantKycToTokenAccount(
    _ request: Proto_Transaction,
    callOptions: CallOptions?
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse>

  func revokeKycFromTokenAccount(
    _ request: Proto_Transaction,
    callOptions: CallOptions?
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse>

  func associateTokens(
    _ request: Proto_Transaction,
    callOptions: CallOptions?
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse>

  func dissociateTokens(
    _ request: Proto_Transaction,
    callOptions: CallOptions?
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse>

  func getTokenInfo(
    _ request: Proto_Query,
    callOptions: CallOptions?
  ) -> UnaryCall<Proto_Query, Proto_Response>

  func getAccountNftInfo(
    _ request: Proto_Query,
    callOptions: CallOptions?
  ) -> UnaryCall<Proto_Query, Proto_Response>

  func getTokenNftInfo(
    _ request: Proto_Query,
    callOptions: CallOptions?
  ) -> UnaryCall<Proto_Query, Proto_Response>

  func getTokenNftInfos(
    _ request: Proto_Query,
    callOptions: CallOptions?
  ) -> UnaryCall<Proto_Query, Proto_Response>
}

extension Proto_TokenServiceClientProtocol {
  public var serviceName: String {
    return "proto.TokenService"
  }

  /// Creates a new Token by submitting the transaction
  ///
  /// - Parameters:
  ///   - request: Request to send to createToken.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createToken(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeUnaryCall(
      path: "/proto.TokenService/createToken",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makecreateTokenInterceptors() ?? []
    )
  }

  /// Updates the account by submitting the transaction
  ///
  /// - Parameters:
  ///   - request: Request to send to updateToken.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateToken(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeUnaryCall(
      path: "/proto.TokenService/updateToken",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeupdateTokenInterceptors() ?? []
    )
  }

  /// Mints an amount of the token to the defined treasury account
  ///
  /// - Parameters:
  ///   - request: Request to send to mintToken.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func mintToken(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeUnaryCall(
      path: "/proto.TokenService/mintToken",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makemintTokenInterceptors() ?? []
    )
  }

  /// Burns an amount of the token from the defined treasury account
  ///
  /// - Parameters:
  ///   - request: Request to send to burnToken.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func burnToken(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeUnaryCall(
      path: "/proto.TokenService/burnToken",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeburnTokenInterceptors() ?? []
    )
  }

  /// Deletes a Token
  ///
  /// - Parameters:
  ///   - request: Request to send to deleteToken.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteToken(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeUnaryCall(
      path: "/proto.TokenService/deleteToken",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makedeleteTokenInterceptors() ?? []
    )
  }

  /// Wipes the provided amount of tokens from the specified Account ID
  ///
  /// - Parameters:
  ///   - request: Request to send to wipeTokenAccount.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func wipeTokenAccount(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeUnaryCall(
      path: "/proto.TokenService/wipeTokenAccount",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makewipeTokenAccountInterceptors() ?? []
    )
  }

  /// Freezes the transfer of tokens to or from the specified Account ID
  ///
  /// - Parameters:
  ///   - request: Request to send to freezeTokenAccount.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func freezeTokenAccount(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeUnaryCall(
      path: "/proto.TokenService/freezeTokenAccount",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makefreezeTokenAccountInterceptors() ?? []
    )
  }

  /// Unfreezes the transfer of tokens to or from the specified Account ID
  ///
  /// - Parameters:
  ///   - request: Request to send to unfreezeTokenAccount.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func unfreezeTokenAccount(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeUnaryCall(
      path: "/proto.TokenService/unfreezeTokenAccount",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeunfreezeTokenAccountInterceptors() ?? []
    )
  }

  /// Flags the provided Account ID as having gone through KYC
  ///
  /// - Parameters:
  ///   - request: Request to send to grantKycToTokenAccount.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func grantKycToTokenAccount(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeUnaryCall(
      path: "/proto.TokenService/grantKycToTokenAccount",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegrantKycToTokenAccountInterceptors() ?? []
    )
  }

  /// Removes the KYC flag of the provided Account ID
  ///
  /// - Parameters:
  ///   - request: Request to send to revokeKycFromTokenAccount.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func revokeKycFromTokenAccount(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeUnaryCall(
      path: "/proto.TokenService/revokeKycFromTokenAccount",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makerevokeKycFromTokenAccountInterceptors() ?? []
    )
  }

  /// Associates tokens to an account
  ///
  /// - Parameters:
  ///   - request: Request to send to associateTokens.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func associateTokens(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeUnaryCall(
      path: "/proto.TokenService/associateTokens",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeassociateTokensInterceptors() ?? []
    )
  }

  /// Dissociates tokens from an account
  ///
  /// - Parameters:
  ///   - request: Request to send to dissociateTokens.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func dissociateTokens(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeUnaryCall(
      path: "/proto.TokenService/dissociateTokens",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makedissociateTokensInterceptors() ?? []
    )
  }

  /// Retrieves the metadata of a token
  ///
  /// - Parameters:
  ///   - request: Request to send to getTokenInfo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getTokenInfo(
    _ request: Proto_Query,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Proto_Query, Proto_Response> {
    return self.makeUnaryCall(
      path: "/proto.TokenService/getTokenInfo",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegetTokenInfoInterceptors() ?? []
    )
  }

  /// Gets info on NFTs N through M on the list of NFTs associated with a given account
  ///
  /// - Parameters:
  ///   - request: Request to send to getAccountNftInfo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getAccountNftInfo(
    _ request: Proto_Query,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Proto_Query, Proto_Response> {
    return self.makeUnaryCall(
      path: "/proto.TokenService/getAccountNftInfo",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegetAccountNftInfoInterceptors() ?? []
    )
  }

  /// Retrieves the metadata of an NFT by TokenID and serial number
  ///
  /// - Parameters:
  ///   - request: Request to send to getTokenNftInfo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getTokenNftInfo(
    _ request: Proto_Query,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Proto_Query, Proto_Response> {
    return self.makeUnaryCall(
      path: "/proto.TokenService/getTokenNftInfo",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegetTokenNftInfoInterceptors() ?? []
    )
  }

  /// Gets info on NFTs N through M on the list of NFTs associated with a given Token of type NON_FUNGIBLE
  ///
  /// - Parameters:
  ///   - request: Request to send to getTokenNftInfos.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getTokenNftInfos(
    _ request: Proto_Query,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Proto_Query, Proto_Response> {
    return self.makeUnaryCall(
      path: "/proto.TokenService/getTokenNftInfos",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegetTokenNftInfosInterceptors() ?? []
    )
  }
}

public protocol Proto_TokenServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'createToken'.
  func makecreateTokenInterceptors() -> [ClientInterceptor<Proto_Transaction, Proto_TransactionResponse>]

  /// - Returns: Interceptors to use when invoking 'updateToken'.
  func makeupdateTokenInterceptors() -> [ClientInterceptor<Proto_Transaction, Proto_TransactionResponse>]

  /// - Returns: Interceptors to use when invoking 'mintToken'.
  func makemintTokenInterceptors() -> [ClientInterceptor<Proto_Transaction, Proto_TransactionResponse>]

  /// - Returns: Interceptors to use when invoking 'burnToken'.
  func makeburnTokenInterceptors() -> [ClientInterceptor<Proto_Transaction, Proto_TransactionResponse>]

  /// - Returns: Interceptors to use when invoking 'deleteToken'.
  func makedeleteTokenInterceptors() -> [ClientInterceptor<Proto_Transaction, Proto_TransactionResponse>]

  /// - Returns: Interceptors to use when invoking 'wipeTokenAccount'.
  func makewipeTokenAccountInterceptors() -> [ClientInterceptor<Proto_Transaction, Proto_TransactionResponse>]

  /// - Returns: Interceptors to use when invoking 'freezeTokenAccount'.
  func makefreezeTokenAccountInterceptors() -> [ClientInterceptor<Proto_Transaction, Proto_TransactionResponse>]

  /// - Returns: Interceptors to use when invoking 'unfreezeTokenAccount'.
  func makeunfreezeTokenAccountInterceptors() -> [ClientInterceptor<Proto_Transaction, Proto_TransactionResponse>]

  /// - Returns: Interceptors to use when invoking 'grantKycToTokenAccount'.
  func makegrantKycToTokenAccountInterceptors() -> [ClientInterceptor<Proto_Transaction, Proto_TransactionResponse>]

  /// - Returns: Interceptors to use when invoking 'revokeKycFromTokenAccount'.
  func makerevokeKycFromTokenAccountInterceptors() -> [ClientInterceptor<Proto_Transaction, Proto_TransactionResponse>]

  /// - Returns: Interceptors to use when invoking 'associateTokens'.
  func makeassociateTokensInterceptors() -> [ClientInterceptor<Proto_Transaction, Proto_TransactionResponse>]

  /// - Returns: Interceptors to use when invoking 'dissociateTokens'.
  func makedissociateTokensInterceptors() -> [ClientInterceptor<Proto_Transaction, Proto_TransactionResponse>]

  /// - Returns: Interceptors to use when invoking 'getTokenInfo'.
  func makegetTokenInfoInterceptors() -> [ClientInterceptor<Proto_Query, Proto_Response>]

  /// - Returns: Interceptors to use when invoking 'getAccountNftInfo'.
  func makegetAccountNftInfoInterceptors() -> [ClientInterceptor<Proto_Query, Proto_Response>]

  /// - Returns: Interceptors to use when invoking 'getTokenNftInfo'.
  func makegetTokenNftInfoInterceptors() -> [ClientInterceptor<Proto_Query, Proto_Response>]

  /// - Returns: Interceptors to use when invoking 'getTokenNftInfos'.
  func makegetTokenNftInfosInterceptors() -> [ClientInterceptor<Proto_Query, Proto_Response>]
}

public final class Proto_TokenServiceClient: Proto_TokenServiceClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Proto_TokenServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the proto.TokenService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Proto_TokenServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Transactions and queries for the Token Service 
///
/// To build a server, implement a class that conforms to this protocol.
public protocol Proto_TokenServiceProvider: CallHandlerProvider {
  var interceptors: Proto_TokenServiceServerInterceptorFactoryProtocol? { get }

  /// Creates a new Token by submitting the transaction
  func createToken(request: Proto_Transaction, context: StatusOnlyCallContext) -> EventLoopFuture<Proto_TransactionResponse>

  /// Updates the account by submitting the transaction
  func updateToken(request: Proto_Transaction, context: StatusOnlyCallContext) -> EventLoopFuture<Proto_TransactionResponse>

  /// Mints an amount of the token to the defined treasury account
  func mintToken(request: Proto_Transaction, context: StatusOnlyCallContext) -> EventLoopFuture<Proto_TransactionResponse>

  /// Burns an amount of the token from the defined treasury account
  func burnToken(request: Proto_Transaction, context: StatusOnlyCallContext) -> EventLoopFuture<Proto_TransactionResponse>

  /// Deletes a Token
  func deleteToken(request: Proto_Transaction, context: StatusOnlyCallContext) -> EventLoopFuture<Proto_TransactionResponse>

  /// Wipes the provided amount of tokens from the specified Account ID
  func wipeTokenAccount(request: Proto_Transaction, context: StatusOnlyCallContext) -> EventLoopFuture<Proto_TransactionResponse>

  /// Freezes the transfer of tokens to or from the specified Account ID
  func freezeTokenAccount(request: Proto_Transaction, context: StatusOnlyCallContext) -> EventLoopFuture<Proto_TransactionResponse>

  /// Unfreezes the transfer of tokens to or from the specified Account ID
  func unfreezeTokenAccount(request: Proto_Transaction, context: StatusOnlyCallContext) -> EventLoopFuture<Proto_TransactionResponse>

  /// Flags the provided Account ID as having gone through KYC
  func grantKycToTokenAccount(request: Proto_Transaction, context: StatusOnlyCallContext) -> EventLoopFuture<Proto_TransactionResponse>

  /// Removes the KYC flag of the provided Account ID
  func revokeKycFromTokenAccount(request: Proto_Transaction, context: StatusOnlyCallContext) -> EventLoopFuture<Proto_TransactionResponse>

  /// Associates tokens to an account
  func associateTokens(request: Proto_Transaction, context: StatusOnlyCallContext) -> EventLoopFuture<Proto_TransactionResponse>

  /// Dissociates tokens from an account
  func dissociateTokens(request: Proto_Transaction, context: StatusOnlyCallContext) -> EventLoopFuture<Proto_TransactionResponse>

  /// Retrieves the metadata of a token
  func getTokenInfo(request: Proto_Query, context: StatusOnlyCallContext) -> EventLoopFuture<Proto_Response>

  /// Gets info on NFTs N through M on the list of NFTs associated with a given account
  func getAccountNftInfo(request: Proto_Query, context: StatusOnlyCallContext) -> EventLoopFuture<Proto_Response>

  /// Retrieves the metadata of an NFT by TokenID and serial number
  func getTokenNftInfo(request: Proto_Query, context: StatusOnlyCallContext) -> EventLoopFuture<Proto_Response>

  /// Gets info on NFTs N through M on the list of NFTs associated with a given Token of type NON_FUNGIBLE
  func getTokenNftInfos(request: Proto_Query, context: StatusOnlyCallContext) -> EventLoopFuture<Proto_Response>
}

extension Proto_TokenServiceProvider {
  public var serviceName: Substring { return "proto.TokenService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "createToken":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_Transaction>(),
        responseSerializer: ProtobufSerializer<Proto_TransactionResponse>(),
        interceptors: self.interceptors?.makecreateTokenInterceptors() ?? [],
        userFunction: self.createToken(request:context:)
      )

    case "updateToken":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_Transaction>(),
        responseSerializer: ProtobufSerializer<Proto_TransactionResponse>(),
        interceptors: self.interceptors?.makeupdateTokenInterceptors() ?? [],
        userFunction: self.updateToken(request:context:)
      )

    case "mintToken":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_Transaction>(),
        responseSerializer: ProtobufSerializer<Proto_TransactionResponse>(),
        interceptors: self.interceptors?.makemintTokenInterceptors() ?? [],
        userFunction: self.mintToken(request:context:)
      )

    case "burnToken":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_Transaction>(),
        responseSerializer: ProtobufSerializer<Proto_TransactionResponse>(),
        interceptors: self.interceptors?.makeburnTokenInterceptors() ?? [],
        userFunction: self.burnToken(request:context:)
      )

    case "deleteToken":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_Transaction>(),
        responseSerializer: ProtobufSerializer<Proto_TransactionResponse>(),
        interceptors: self.interceptors?.makedeleteTokenInterceptors() ?? [],
        userFunction: self.deleteToken(request:context:)
      )

    case "wipeTokenAccount":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_Transaction>(),
        responseSerializer: ProtobufSerializer<Proto_TransactionResponse>(),
        interceptors: self.interceptors?.makewipeTokenAccountInterceptors() ?? [],
        userFunction: self.wipeTokenAccount(request:context:)
      )

    case "freezeTokenAccount":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_Transaction>(),
        responseSerializer: ProtobufSerializer<Proto_TransactionResponse>(),
        interceptors: self.interceptors?.makefreezeTokenAccountInterceptors() ?? [],
        userFunction: self.freezeTokenAccount(request:context:)
      )

    case "unfreezeTokenAccount":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_Transaction>(),
        responseSerializer: ProtobufSerializer<Proto_TransactionResponse>(),
        interceptors: self.interceptors?.makeunfreezeTokenAccountInterceptors() ?? [],
        userFunction: self.unfreezeTokenAccount(request:context:)
      )

    case "grantKycToTokenAccount":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_Transaction>(),
        responseSerializer: ProtobufSerializer<Proto_TransactionResponse>(),
        interceptors: self.interceptors?.makegrantKycToTokenAccountInterceptors() ?? [],
        userFunction: self.grantKycToTokenAccount(request:context:)
      )

    case "revokeKycFromTokenAccount":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_Transaction>(),
        responseSerializer: ProtobufSerializer<Proto_TransactionResponse>(),
        interceptors: self.interceptors?.makerevokeKycFromTokenAccountInterceptors() ?? [],
        userFunction: self.revokeKycFromTokenAccount(request:context:)
      )

    case "associateTokens":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_Transaction>(),
        responseSerializer: ProtobufSerializer<Proto_TransactionResponse>(),
        interceptors: self.interceptors?.makeassociateTokensInterceptors() ?? [],
        userFunction: self.associateTokens(request:context:)
      )

    case "dissociateTokens":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_Transaction>(),
        responseSerializer: ProtobufSerializer<Proto_TransactionResponse>(),
        interceptors: self.interceptors?.makedissociateTokensInterceptors() ?? [],
        userFunction: self.dissociateTokens(request:context:)
      )

    case "getTokenInfo":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_Query>(),
        responseSerializer: ProtobufSerializer<Proto_Response>(),
        interceptors: self.interceptors?.makegetTokenInfoInterceptors() ?? [],
        userFunction: self.getTokenInfo(request:context:)
      )

    case "getAccountNftInfo":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_Query>(),
        responseSerializer: ProtobufSerializer<Proto_Response>(),
        interceptors: self.interceptors?.makegetAccountNftInfoInterceptors() ?? [],
        userFunction: self.getAccountNftInfo(request:context:)
      )

    case "getTokenNftInfo":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_Query>(),
        responseSerializer: ProtobufSerializer<Proto_Response>(),
        interceptors: self.interceptors?.makegetTokenNftInfoInterceptors() ?? [],
        userFunction: self.getTokenNftInfo(request:context:)
      )

    case "getTokenNftInfos":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_Query>(),
        responseSerializer: ProtobufSerializer<Proto_Response>(),
        interceptors: self.interceptors?.makegetTokenNftInfosInterceptors() ?? [],
        userFunction: self.getTokenNftInfos(request:context:)
      )

    default:
      return nil
    }
  }
}

public protocol Proto_TokenServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'createToken'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makecreateTokenInterceptors() -> [ServerInterceptor<Proto_Transaction, Proto_TransactionResponse>]

  /// - Returns: Interceptors to use when handling 'updateToken'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeupdateTokenInterceptors() -> [ServerInterceptor<Proto_Transaction, Proto_TransactionResponse>]

  /// - Returns: Interceptors to use when handling 'mintToken'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makemintTokenInterceptors() -> [ServerInterceptor<Proto_Transaction, Proto_TransactionResponse>]

  /// - Returns: Interceptors to use when handling 'burnToken'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeburnTokenInterceptors() -> [ServerInterceptor<Proto_Transaction, Proto_TransactionResponse>]

  /// - Returns: Interceptors to use when handling 'deleteToken'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makedeleteTokenInterceptors() -> [ServerInterceptor<Proto_Transaction, Proto_TransactionResponse>]

  /// - Returns: Interceptors to use when handling 'wipeTokenAccount'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makewipeTokenAccountInterceptors() -> [ServerInterceptor<Proto_Transaction, Proto_TransactionResponse>]

  /// - Returns: Interceptors to use when handling 'freezeTokenAccount'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makefreezeTokenAccountInterceptors() -> [ServerInterceptor<Proto_Transaction, Proto_TransactionResponse>]

  /// - Returns: Interceptors to use when handling 'unfreezeTokenAccount'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeunfreezeTokenAccountInterceptors() -> [ServerInterceptor<Proto_Transaction, Proto_TransactionResponse>]

  /// - Returns: Interceptors to use when handling 'grantKycToTokenAccount'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makegrantKycToTokenAccountInterceptors() -> [ServerInterceptor<Proto_Transaction, Proto_TransactionResponse>]

  /// - Returns: Interceptors to use when handling 'revokeKycFromTokenAccount'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makerevokeKycFromTokenAccountInterceptors() -> [ServerInterceptor<Proto_Transaction, Proto_TransactionResponse>]

  /// - Returns: Interceptors to use when handling 'associateTokens'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeassociateTokensInterceptors() -> [ServerInterceptor<Proto_Transaction, Proto_TransactionResponse>]

  /// - Returns: Interceptors to use when handling 'dissociateTokens'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makedissociateTokensInterceptors() -> [ServerInterceptor<Proto_Transaction, Proto_TransactionResponse>]

  /// - Returns: Interceptors to use when handling 'getTokenInfo'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makegetTokenInfoInterceptors() -> [ServerInterceptor<Proto_Query, Proto_Response>]

  /// - Returns: Interceptors to use when handling 'getAccountNftInfo'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makegetAccountNftInfoInterceptors() -> [ServerInterceptor<Proto_Query, Proto_Response>]

  /// - Returns: Interceptors to use when handling 'getTokenNftInfo'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makegetTokenNftInfoInterceptors() -> [ServerInterceptor<Proto_Query, Proto_Response>]

  /// - Returns: Interceptors to use when handling 'getTokenNftInfos'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makegetTokenNftInfosInterceptors() -> [ServerInterceptor<Proto_Query, Proto_Response>]
}
