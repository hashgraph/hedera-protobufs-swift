// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: ContractUpdate.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///
///At consensus, updates the fields of a smart contract to the given values.
///
///If no value is given for a field, that field is left unchanged on the contract. For an immutable smart contract (that is, a contract created without an adminKey), only the expirationTime may be updated; setting any other field in this case will cause the transaction status to resolve to MODIFYING_IMMUTABLE_CONTRACT.
///
///--- Signing Requirements ---
///1. Whether or not a contract has an admin Key, its expiry can be extended with only the transaction payer's signature.
///2. Updating any other field of a mutable contract requires the admin key's signature.
///3. If the update transaction includes a new admin key, this new key must also sign <b>unless</b> it is exactly an empty <tt>KeyList</tt>. This special sentinel key removes the existing admin key and causes the contract to become immutable. (Other <tt>Key</tt> structures without a constituent <tt>Ed25519</tt> key will be rejected with <tt>INVALID_ADMIN_KEY</tt>.) 
public struct Proto_ContractUpdateTransactionBody {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The id of the contract to be updated
  public var contractID: Proto_ContractID {
    get {return _contractID ?? Proto_ContractID()}
    set {_contractID = newValue}
  }
  /// Returns true if `contractID` has been explicitly set.
  public var hasContractID: Bool {return self._contractID != nil}
  /// Clears the value of `contractID`. Subsequent reads from it will return its default value.
  public mutating func clearContractID() {self._contractID = nil}

  /// The new expiry of the contract, no earlier than the current expiry (resolves to EXPIRATION_REDUCTION_NOT_ALLOWED otherwise)
  public var expirationTime: Proto_Timestamp {
    get {return _expirationTime ?? Proto_Timestamp()}
    set {_expirationTime = newValue}
  }
  /// Returns true if `expirationTime` has been explicitly set.
  public var hasExpirationTime: Bool {return self._expirationTime != nil}
  /// Clears the value of `expirationTime`. Subsequent reads from it will return its default value.
  public mutating func clearExpirationTime() {self._expirationTime = nil}

  /// The new key to control updates to the contract
  public var adminKey: Proto_Key {
    get {return _adminKey ?? Proto_Key()}
    set {_adminKey = newValue}
  }
  /// Returns true if `adminKey` has been explicitly set.
  public var hasAdminKey: Bool {return self._adminKey != nil}
  /// Clears the value of `adminKey`. Subsequent reads from it will return its default value.
  public mutating func clearAdminKey() {self._adminKey = nil}

  /// (NOT YET IMPLEMENTED) The new id of the account to which the contract is proxy staked
  public var proxyAccountID: Proto_AccountID {
    get {return _proxyAccountID ?? Proto_AccountID()}
    set {_proxyAccountID = newValue}
  }
  /// Returns true if `proxyAccountID` has been explicitly set.
  public var hasProxyAccountID: Bool {return self._proxyAccountID != nil}
  /// Clears the value of `proxyAccountID`. Subsequent reads from it will return its default value.
  public mutating func clearProxyAccountID() {self._proxyAccountID = nil}

  /// (NOT YET IMPLEMENTED) The new interval at which the contract will pay to extend its expiry (by the same interval)
  public var autoRenewPeriod: Proto_Duration {
    get {return _autoRenewPeriod ?? Proto_Duration()}
    set {_autoRenewPeriod = newValue}
  }
  /// Returns true if `autoRenewPeriod` has been explicitly set.
  public var hasAutoRenewPeriod: Bool {return self._autoRenewPeriod != nil}
  /// Clears the value of `autoRenewPeriod`. Subsequent reads from it will return its default value.
  public mutating func clearAutoRenewPeriod() {self._autoRenewPeriod = nil}

  /// The new id of the file asserted to contain the bytecode of the Solidity transaction that created this contract
  public var fileID: Proto_FileID {
    get {return _fileID ?? Proto_FileID()}
    set {_fileID = newValue}
  }
  /// Returns true if `fileID` has been explicitly set.
  public var hasFileID: Bool {return self._fileID != nil}
  /// Clears the value of `fileID`. Subsequent reads from it will return its default value.
  public mutating func clearFileID() {self._fileID = nil}

  /// The new contract memo, assumed to be Unicode encoded with UTF-8 (at most 100 bytes)
  public var memoField: Proto_ContractUpdateTransactionBody.OneOf_MemoField? = nil

  /// [Deprecated] If set with a non-zero length, the new memo to be associated with the account (UTF-8 encoding max 100 bytes)
  public var memo: String {
    get {
      if case .memo(let v)? = memoField {return v}
      return String()
    }
    set {memoField = .memo(newValue)}
  }

  /// If set, the new memo to be associated with the account (UTF-8 encoding max 100 bytes)
  public var memoWrapper: SwiftProtobuf.Google_Protobuf_StringValue {
    get {
      if case .memoWrapper(let v)? = memoField {return v}
      return SwiftProtobuf.Google_Protobuf_StringValue()
    }
    set {memoField = .memoWrapper(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// The new contract memo, assumed to be Unicode encoded with UTF-8 (at most 100 bytes)
  public enum OneOf_MemoField: Equatable {
    /// [Deprecated] If set with a non-zero length, the new memo to be associated with the account (UTF-8 encoding max 100 bytes)
    case memo(String)
    /// If set, the new memo to be associated with the account (UTF-8 encoding max 100 bytes)
    case memoWrapper(SwiftProtobuf.Google_Protobuf_StringValue)

  #if !swift(>=4.1)
    public static func ==(lhs: Proto_ContractUpdateTransactionBody.OneOf_MemoField, rhs: Proto_ContractUpdateTransactionBody.OneOf_MemoField) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.memo, .memo): return {
        guard case .memo(let l) = lhs, case .memo(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.memoWrapper, .memoWrapper): return {
        guard case .memoWrapper(let l) = lhs, case .memoWrapper(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}

  fileprivate var _contractID: Proto_ContractID? = nil
  fileprivate var _expirationTime: Proto_Timestamp? = nil
  fileprivate var _adminKey: Proto_Key? = nil
  fileprivate var _proxyAccountID: Proto_AccountID? = nil
  fileprivate var _autoRenewPeriod: Proto_Duration? = nil
  fileprivate var _fileID: Proto_FileID? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "proto"

extension Proto_ContractUpdateTransactionBody: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ContractUpdateTransactionBody"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "contractID"),
    2: .same(proto: "expirationTime"),
    3: .same(proto: "adminKey"),
    6: .same(proto: "proxyAccountID"),
    7: .same(proto: "autoRenewPeriod"),
    8: .same(proto: "fileID"),
    9: .same(proto: "memo"),
    10: .same(proto: "memoWrapper"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._contractID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._expirationTime) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._adminKey) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._proxyAccountID) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._autoRenewPeriod) }()
      case 8: try { try decoder.decodeSingularMessageField(value: &self._fileID) }()
      case 9: try {
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {
          if self.memoField != nil {try decoder.handleConflictingOneOf()}
          self.memoField = .memo(v)
        }
      }()
      case 10: try {
        var v: SwiftProtobuf.Google_Protobuf_StringValue?
        var hadOneofValue = false
        if let current = self.memoField {
          hadOneofValue = true
          if case .memoWrapper(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.memoField = .memoWrapper(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._contractID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._expirationTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._adminKey {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._proxyAccountID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if let v = self._autoRenewPeriod {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    if let v = self._fileID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.memoField {
    case .memo?: try {
      guard case .memo(let v)? = self.memoField else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 9)
    }()
    case .memoWrapper?: try {
      guard case .memoWrapper(let v)? = self.memoField else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_ContractUpdateTransactionBody, rhs: Proto_ContractUpdateTransactionBody) -> Bool {
    if lhs._contractID != rhs._contractID {return false}
    if lhs._expirationTime != rhs._expirationTime {return false}
    if lhs._adminKey != rhs._adminKey {return false}
    if lhs._proxyAccountID != rhs._proxyAccountID {return false}
    if lhs._autoRenewPeriod != rhs._autoRenewPeriod {return false}
    if lhs._fileID != rhs._fileID {return false}
    if lhs.memoField != rhs.memoField {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
