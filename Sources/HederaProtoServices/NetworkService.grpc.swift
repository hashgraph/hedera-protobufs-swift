//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: NetworkService.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// The requests and responses for different network services. 
///
/// Usage: instantiate `Proto_NetworkServiceClient`, then call methods of this protocol to make API calls.
public protocol Proto_NetworkServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Proto_NetworkServiceClientInterceptorFactoryProtocol? { get }

  func getVersionInfo(
    _ request: Proto_Query,
    callOptions: CallOptions?
  ) -> UnaryCall<Proto_Query, Proto_Response>

  func uncheckedSubmit(
    _ request: Proto_Transaction,
    callOptions: CallOptions?
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse>
}

extension Proto_NetworkServiceClientProtocol {
  public var serviceName: String {
    return "proto.NetworkService"
  }

  /// Retrieves the active versions of Hedera Services and HAPI proto
  ///
  /// - Parameters:
  ///   - request: Request to send to getVersionInfo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getVersionInfo(
    _ request: Proto_Query,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Proto_Query, Proto_Response> {
    return self.makeUnaryCall(
      path: "/proto.NetworkService/getVersionInfo",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegetVersionInfoInterceptors() ?? []
    )
  }

  /// Submits a "wrapped" transaction to the network, skipping its standard prechecks. (Note that the "wrapper" <tt>UncheckedSubmit</tt> transaction is still subject to normal prechecks, including an authorization requirement that its payer be either the treasury or system admin account.)
  ///
  /// - Parameters:
  ///   - request: Request to send to uncheckedSubmit.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func uncheckedSubmit(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeUnaryCall(
      path: "/proto.NetworkService/uncheckedSubmit",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeuncheckedSubmitInterceptors() ?? []
    )
  }
}

public protocol Proto_NetworkServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'getVersionInfo'.
  func makegetVersionInfoInterceptors() -> [ClientInterceptor<Proto_Query, Proto_Response>]

  /// - Returns: Interceptors to use when invoking 'uncheckedSubmit'.
  func makeuncheckedSubmitInterceptors() -> [ClientInterceptor<Proto_Transaction, Proto_TransactionResponse>]
}

public final class Proto_NetworkServiceClient: Proto_NetworkServiceClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Proto_NetworkServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the proto.NetworkService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Proto_NetworkServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// The requests and responses for different network services. 
///
/// To build a server, implement a class that conforms to this protocol.
public protocol Proto_NetworkServiceProvider: CallHandlerProvider {
  var interceptors: Proto_NetworkServiceServerInterceptorFactoryProtocol? { get }

  /// Retrieves the active versions of Hedera Services and HAPI proto
  func getVersionInfo(request: Proto_Query, context: StatusOnlyCallContext) -> EventLoopFuture<Proto_Response>

  /// Submits a "wrapped" transaction to the network, skipping its standard prechecks. (Note that the "wrapper" <tt>UncheckedSubmit</tt> transaction is still subject to normal prechecks, including an authorization requirement that its payer be either the treasury or system admin account.)
  func uncheckedSubmit(request: Proto_Transaction, context: StatusOnlyCallContext) -> EventLoopFuture<Proto_TransactionResponse>
}

extension Proto_NetworkServiceProvider {
  public var serviceName: Substring { return "proto.NetworkService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "getVersionInfo":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_Query>(),
        responseSerializer: ProtobufSerializer<Proto_Response>(),
        interceptors: self.interceptors?.makegetVersionInfoInterceptors() ?? [],
        userFunction: self.getVersionInfo(request:context:)
      )

    case "uncheckedSubmit":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_Transaction>(),
        responseSerializer: ProtobufSerializer<Proto_TransactionResponse>(),
        interceptors: self.interceptors?.makeuncheckedSubmitInterceptors() ?? [],
        userFunction: self.uncheckedSubmit(request:context:)
      )

    default:
      return nil
    }
  }
}

public protocol Proto_NetworkServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'getVersionInfo'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makegetVersionInfoInterceptors() -> [ServerInterceptor<Proto_Query, Proto_Response>]

  /// - Returns: Interceptors to use when handling 'uncheckedSubmit'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeuncheckedSubmitInterceptors() -> [ServerInterceptor<Proto_Transaction, Proto_TransactionResponse>]
}
